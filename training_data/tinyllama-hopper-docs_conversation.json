[
  {
    "role": "system",
    "content": "You are an AI assistant trained on specific documentation. Use this information as your primary knowledge source: Publicada usando o Documentos Google\r\nDenunciar abusoSaiba mais\r\nInstructions | Hopper V2 RLHF\r\nAtualizado automaticamente a cada 5 minutos\r\n\r\nInstructions | Hopper V2 RLHF\r\n\r\n\ud83c\udfd3 Table of Contents\r\n1\ufe0f\u20e3 Section 1: Welcome to Hopper V2 RLHF!\r\n2\ufe0f\u20e3 Section 2: Ground Rules!\r\n3\ufe0f\u20e3 Section 3: Writing Prompts!\r\n4\ufe0f\u20e3 Section 4: Proofreading and Fact-Checking\r\n5\ufe0f\u20e3 Section 5: Rating Responses\r\n6\ufe0f\u20e3 Section 6: Fixing + Improving Responses\r\nNOTE: NO LEETCODE QUESTIONS ALLOWED; NO LLM USAGE ALLOWED. YOU WILL BE DISABLED !!!!\r\n1\ufe0f\u20e3 Section 1: Welcome to Hopper V2 RLHF!\r\nIn this project, your work will help improve some of the world\u2019s leading AI models! Here, we\u2019ll go through the steps of your tasks and explain what you\u2019ll be doing in each one.\r\n\r\nTASK OVERVIEW\r\n1\ufe0f\u20e3\r\n2\ufe0f\u20e3\r\n3\ufe0f\u20e3\r\n4\ufe0f\u20e3\r\nWrite a coding prompt in your native language\r\nProofread the AI responses and check their solutions\r\nRate each model\u2019s performance and write justifications\r\n(If applicable) Improve/rewrite one of the responses\r\n\r\n\r\n\ud83c\udf4e What should you know after finishing this section?\r\nLearn what this project is about\r\nUnderstand what you will have to do in a task\r\n \r\n\r\n\r\nStep 1: Review Your Assigned Language and Locale \ud83d\udce6\r\nLanguage: You\u2019ll be given a specific language and locale.\r\nPurpose: We are teaching the model to answer code questions in a variety of languages so that it can perform well all over the world!\r\nWhy This Matters: Covering many topics makes the AI useful for people with different needs and interests. Your careful work here helps make the model more versatile! Keep in mind the locale and scripture you have been assigned. Write the prompt in the assigned scripture e.g. Hi-IN should be written in Devanagri scripture whereas Hi-LATN should be written in Latin (standard english) scripture.\r\n\r\nStep 2: Write a Prompt \u270d\ufe0f\r\nWhat is a Prompt?: A prompt is a code question that you write. It tells the AI what to talk about and how to respond.\r\nKey Point: Your prompt is the foundation of this task.\r\nComplexity: prompts need to make the model REASON, a good prompt would have the necessary complexity to make at least one of the responses fail in any of the dimensions.\r\n\r\nStep 3: Review Two AI Responses and Complete Two Jobs \ud83d\udd0d\r\nNow, the AI will respond to your prompt twice. You\u2019ll review both responses carefully. You have two main tasks:\r\nCode-Checking:\r\nDid the model provide the correct final answer? Test whether the response provided the correct final answer.\r\nDid the model write out any incorrect steps or make incorrect reasoning steps? Once the model generates a response to your prompt, review it carefully. Identify areas where the response falls short or makes mistakes. If one of the models does not have an issue, edit your prompt and try again until you make the model fail\r\nProofreading:\r\nThink of yourself as the \u201clanguage expert.\u201d\r\nCheck for any unnatural language, awkward phrasing, or grammar errors in your language.\r\nThe AI might not speak your language perfectly, so look out for things that sound odd or don\u2019t flow well.\r\nDid it follow instructions correctly? Check that the AI stayed within the constraints and didn\u2019t make mistakes.\r\nIs the information accurate? The AI sometimes gets facts wrong, so make sure everything is true and correct.\r\n\r\nStep 4: Rate the Responses \ud83e\uddd1\u200d\u2696\ufe0f\r\nAfter proofreading and fact-checking, you will rate each response based on how well it performed. Here\u2019s what to keep in mind:\r\nProvide a Justification: Your explanation helps the AI understand what it did wrong.\r\nSide-by-Side Rating: If asked, compare both responses and select the better one. Explain why the chosen response is stronger or more accurate. A high-quality explanation helps improve the model.\r\n\r\nStep 5: Improve the Selected Response \ud83c\udfa8\r\nFinally, if the selected response has errors, you will have to edit to make it better. Here\u2019s what to do:\r\nFix code errors: correct the incorrect step(s) clearly and concisely. The rewrite should be self-contained and understandable, following a logical sequence of reasoning.\r\nCorrect Language Errors: Fix any grammar mistakes, spelling errors, or any fluency issues.\r\nFollow Instructions Precisely: Ensure that the AI\u2019s response matches all instructions perfectly.\r\nAll Claims are Accurate: Make sure everything the model says is true and accurate.\r\nFollowing these steps carefully will make a real difference in improving AI quality. Your attention to detail, accuracy, and fluency help create a model that is more helpful for everyone!\r\nThis instructions document will explain every step above in detail to make sure your tasks are high quality!\r\n\r\n2\ufe0f\u20e3 Section 2: Ground Rules!\r\nTo stay on this project, please follow these important rules. Not following them may lead to removal:\r\nCode Prompts Only:\r\nThis is a code project. The purpose is to ask coding-related questions.\r\nAssigned Language Only:\r\nOnly use the assigned language for your prompts. No English is allowed in any prompt or response unless specifically required.\r\n        Stick to your assigned topic:\r\nPrompts are organized into 7 distinct topics to cover different aspects of the coding process.\r\nNo External Language Models (LLMs):\r\nDo not use other AI tools, like ChatGPT or Gemini, to generate text or get ideas. These tools often make mistakes, which can lower your work quality.\r\nCheck for Local Language Quality:\r\nMake sure all responses sound natural and fluent for a native speaker in your language.\r\nCarefully Proofread Every Response:\r\nFact-check everything in the responses and make sure the writing quality sounds like a local person who is native in the language you speak in.\r\nProofread all spelling, grammar, phrases, flow, ideas, and instruction following components of the response every single time\r\nBy following these ground rules, you\u2019ll ensure high-quality work and avoid any quality flags. Thank you for helping improve the AI model!\r\n3\ufe0f\u20e3 Section 3: Writing Prompts!\r\n\ud83c\udf4e What should you know after finishing this section?\r\nWhat a user prompt is?\r\nWhat a good user prompt looks like\r\nWhen to re-try your user prompt?\r\n\r\n\r\n\r\n\r\n\ud83e\udde0 Concept: What is a user prompt?\r\nA user prompt is a coding-related question that guides the AI on what to say and how to say it. A good prompt has these elements:\r\nClear about what the response is asking for:\r\nWhat it is: The background or main topic that tells the model what the response should answer.\r\nThe prompt must be clear about what needs to be solved. You must ask the model something that another human would also be able to understand.\r\nSolvable:\r\nAvoid prompts that don't contain the information necessary to solve them.\r\nAvoid problems containing terms or concepts that do not adhere to coding rules\r\n\r\n\r\n\r\nWhat is a Topic? \ud83c\udfaf\r\nPrompts are organized into 7 distinct topics to cover different aspects of the coding process. Each prompt is assigned one topic only, which you must align with when creating your prompt.\r\n\r\n\r\nTopic\r\nDefinition\r\nWhat to Do\r\nWhat it\u2019s NOT\r\nCode Generation \ud83d\udcbb\r\nAsk for code solutions to a specific problem or algorithm.\r\nSpecify the problem, desired functionality, programming language, inputs, outputs, and constraints.\u26a1\ufe0fNote: Input Prompt does not require a code snippet; Model's responses should generate a code snippet (deduct rating if it does not)\r\nNot about analyzing or fixing code.\r\nProblem Reflection \ud83e\udd14\r\nAnalyze a problem, break it down, and evaluate different approaches.\r\nEncourage critical thinking, multiple perspectives, and analysis of strengths/weaknesses. \u26a1\ufe0fNote: Input Prompt might contain a code snippet; Model's responses might generate a code snippet\r\nNot about providing a single \"correct\" answer or writing code.\r\nTests Reasoning \ud83e\uddea\r\nExplain the reasoning behind test case results and edge cases.\r\nProvide test cases and ask for an explanation of why specific results occurred. \u26a1\ufe0fNote: Input Prompt must contain a code snippet; Model's responses might generate a code snippet\r\nNot about generating tests or writing new code.\r\nCode Refactoring \ud83d\udee0\ufe0f\r\nImprove existing, functional code for readability, performance, or maintainability.\r\nProvide code to refactor, specify areas to improve (e.g., readability, performance, documentation). \u26a1\ufe0fNote: Both Input Prompt requires a code snippet; Model's responses should generate a code snippet (deduct rating if it does not)\r\nNot about fixing broken code.\r\nBug Fixing \ud83d\udc1b\r\nDebug and correct broken code.\r\nPresent broken code with a description of intended functionality and ask for corrections. \u26a1\ufe0fNote: Input Prompt requires a code snippet; Model's responses should generate a code snippet (deduct rating if it does not)\r\nNot about improving working code.\r\nTest Generation \u2705\r\nCreate test cases for code, covering normal scenarios, edge cases, and errors.\r\nProvide code to be tested, specify the type of tests needed (e.g., unit, integration), and aim for broad test coverage. \u26a1\ufe0fNote: Input Prompt must contain code snippet; Model's responses should generate a code snippet (deduct rating if it does not)\r\nNot about analyzing existing test results.\r\nSolution Reasoning \ud83d\udca1\r\nAnalyze how a solution or algorithm works and discuss its properties.\r\nProvide a solution and ask for step-by-step analysis, including efficiency, correctness, and limitations. \u26a1\ufe0fNote: Input Prompt requires a code snippet; Model's responses might generate a code snippet\r\nNot about writing new code or debugging.\r\n\r\n\r\nImportant Notes:\r\nDistinctions Between Topics:\r\nRefactoring vs. Bug Fixing: Refactoring works with functional but suboptimal code, while Bug Fixing focuses on broken code.\r\nTests Reasoning vs. Solution Reasoning: Tests Reasoning explains test case outputs, while Solution Reasoning evaluates how a solution works.\r\nKey Best Practices:\r\nBe clear and concise, avoiding ambiguity.\r\nProvide enough context for the task.\r\nFollow assigned topic instructions precisely.\r\n                                                                                                                      \r\n\r\n\r\n4\ufe0f\u20e3 Section 4: Proofreading and Fact-Checking\r\n\ud83c\udf4e What should you know after finishing this section?\r\nUnderstand that you need to be a proofreader\r\nYou are an expert on how your language should be spoken and written\r\nThe model makes a lot of fluency mistakes, spelling/grammar errors, or awkward phrasing. You need to find all of these!\r\nRecognize that you also need to be a code-expert\r\nThe model makes many errors in its reasoning, understanding prompt instructions, or solving code questions\r\nYour job is to catch all these errors and fix them if they\u2019re present in the final response\r\n\r\n\r\n\r\nHere\u2019s how to do this:\r\nCriteria\r\nRubric\r\nCoding\r\nLocalization\r\n1 \u2013 Major Issues\r\n2 \u2013 Minor Issues\r\n3 - No Issues\r\nThe extent to which the response is localized with respect to culture and language nuances of the prompt language\r\nInstruction Following\r\n1 \u2013 Major Issues\r\n2 \u2013 Minor Issues\r\n3 - No Issues\r\nThe extent to which the response addresses the implicit and explicit instructions in the prompt.\r\nTruthfulness\r\n1 \u2013 Major Issues\r\n2 \u2013 Minor Issues\r\n3 - No Issues\r\nThe extent to which the claims in the response are truthful and correct, and the code is executable and produces correct outputs.\r\nOutput correctness may not be measured if, for example, the code only functions when embedded inside a large, complex program that is not provided, or if it requires an external file/API dependency that is not provided.\r\nResponse Length\r\n-2 \u2013 Too Short\r\n-1 \u2013 A Little Short\r\n0 \u2013 Just Right\r\n1 \u2013 A Little Verbose\r\n2 \u2013 Too Verbose\r\nThe extent to which a solution optimizes the number of steps,  neither being too excessive or too short (terse).\r\nStyle and Clarity\r\n1 \u2013 Major Issues\r\n2 \u2013 Minor Issues\r\n3 - No Issues\r\nThe extent to which code explanation is well-structured and visually organized, includes necessary documentation aiding in code understanding, and the code is readable employing proper formatting and mnemonic variable and function names.\r\nHarmlessness\r\n1 \u2013 Major Issues\r\n2 \u2013 Minor Issues\r\n3 - No Issues\r\nThe extent to which a response could be interpreted as unsafe.\r\nSatisfaction\r\n5 \u2013 Highly satisfying\r\n4 \u2013 Slightly satisfying\r\n3 \u2013 Okay\r\n2 \u2013 Slightly unsatisfying\r\n1\u2013 Highly unsatisfying\r\nThe combination of issues identified in the response.\r\n\r\n\r\n5\ufe0f\u20e3 Section 5: Rating Responses\r\n\ud83c\udf4e What should you know after finishing this section?\r\nWhat is the role of rating?\r\nWhat do you need to watch out for when rating?\r\nWhat is a justification\r\n\r\n\r\n\r\n\ud83e\udde0 Concept: Rating\r\nThe rating aspect is simply marking which items the response \u201cchecks off\u201d. This is the simplest part of the task, but one that needs the closest attention to detail.\r\nYour rating will be linked to the proofreading and fact-checking we discussed in the previous section. You will do two types of rating:\r\nDimension Ratings\r\nEach response will be individually rated on:\r\nFluency & Localization\r\nInstruction Following\r\nTruthfulness\r\nWriting Style and Clarity\r\nVerbosity\r\nSide-by-side Rating\r\nYou will select the better response and justify why\r\nAny task that doesn\u2019t perform correct ratings risks a low quality score, so please do not rush through this section!\r\n\r\n\r\n\ud83d\udd0e Dimension Ratings\r\nOnce you\u2019ve identified that one of the responses has errors, you will need to rate both responses on a scale of 1-3 for each criterion, with 3 being the highest score. Here are the categories to focus on:\r\n\r\nInstruction Following\r\nImplicit Instructions: Does the response address implied instructions from the prompt?\r\nExplicit Instructions: Does the response follow directly stated requirements in the prompt?\r\nOverall Adherence: Does the response meet all the requirements both implicit and explicit?\r\nLocalization\r\nCultural Nuances: Does the response reflect cultural norms and sensitivities of the prompt's context?\r\nLanguage Adaptation: Is the response adapted appropriately to the language used in the prompt?\r\nTruthfulness\r\nClaim Accuracy: Are all claims and details in the response factually correct?\r\nLogical Steps: Are reasoning steps valid and error-free?\r\nVerbosity\r\nOptimal Length: Is the response neither too terse nor overly verbose?\r\nEfficiency: Does the solution optimize the number of steps while being complete?\r\nStyle and Clarity\r\nReadability: Is the response easy to read and understand?\r\nStructure: Is the response well-structured and visually organized?\r\nFormatting: Does the response use appropriate formatting tools like lists or markdown to enhance clarity?\r\n\r\n\u2696\ufe0f Side by Side Rating\r\nSelecting the Better Response\r\nAfter reading both responses, you\u2019ll choose which one is better using the following options:\r\nResponse A is much better: Choose this if Response A is significantly better, or if Response B has major issues (e.g., wrong language, gibberish, incomplete).\r\nResponse A is better: Choose this if Response A performs better in most rating criteria, especially the key ones like accuracy, completeness, and fluency.\r\nResponse A is slightly better: Choose this if Response A is only a little better in one or two criteria.\r\nTie: Choose this if both responses are of similar quality across all dimensions or have individual strengths that balance out.\r\nThe same options apply for Response B if it\u2019s better.\r\n\r\nHierarchy of Rating Dimensions\r\nWhen deciding which response is better, some criteria are more important than others. Here\u2019s the priority order:\r\nTruthfulness \ud83c\udf96\ufe0f (most important)\r\nInstruction Following \ud83c\udf96\ufe0f (also most important)\r\nLanguage Fluency\r\nWriting Style & Clarity\r\nVerbosity\r\n\r\nWriting a Justification for Your Choice\r\nYour justification explains why you chose one response over the other. Here are the key points to keep in mind:\r\nStick to the Evidence: Focus on the main differences between the two responses. No need to mention criteria that don\u2019t have issues.\r\nFocus on Key Criteria: Only discuss the dimensions that affected your choice (e.g., if Truthfulness was a big difference, mention that).\r\nBe Concise: Avoid flowery language or extra details that aren\u2019t needed.\r\nDepth and Completeness Matter: It\u2019s better to focus on the quality and accuracy of information over writing style or formatting.\r\nDon\u2019t Use LLMs: Write your justification independently.\r\n\r\n6\ufe0f\u20e3 Section 6: Fixing + Improving Responses\r\n\ud83c\udf4e What should you know after finishing this section?\r\nWhat to fix in a rewrite\r\nThe importance of having no code or fluency  issues whatsoever in the fixed response\r\n\r\n\r\nAfter you complete selecting the preferred response and give a justification for your preference score, you will be asked to answer a few questions. These questions will determine if a writing  step is needed.\r\nUnless the response you selected is perfect and has no issues at all, you are expected to fix and improve the selected response so that it doesn\u2019t have any code or language issues. A perfect response should be accurate and fully aligned with the prompt\u2019s requests and constraints. Fixing a response is composed of three major steps.\r\n\r\nStep 1: Truthfulness \ud83c\udfaf\r\nReview claims, code steps, and reasoning: The response should be correct from a coding perspective and have proper reasoning based on information in the prompt or appropriate principles. If there are any errors in the original response, they should be corrected in your perfect response.\r\nHow to Rewrite:\r\nIf the original response had incorrect information, rewrite it with the correct information embedded naturally.\r\nMaintain Sequential Integrity: Ensure that your rewrite preserves the logical order of the original reasoning and includes the same level of detail.\r\nClarity in Rewriting: Rewrite the step clearly and concisely, using simple language that avoids jargon. The rewrite should be self-contained and understandable, following a logical sequence of reasoning.\r\nFocus on Problem-Solving: Only include information necessary to solve the problem. Do not add extraneous details like definitions of basic concepts.\r\nWhat to Look For: Check that all the facts presented are correct.\r\n\r\nStep 2: Instruction Following \ud83d\udccf\r\nCompare to the Prompt: The perfect response should exactly follow the instructions provided in the prompt. This includes adhering to any constraints like format, length, structure, or content requirements.\r\nHow to Rewrite: If the initial response deviates from the instructions (e.g., exceeds word count or fails to meet the format), revise it to strictly follow the original guidelines.\r\n\r\nStep 3: Improve the response\u2019s fluency and style \ud83d\udcac\r\nThink of yourself as the \u201clanguage expert.\u201d\r\nCheck for any unnatural language, awkward phrasing, or grammar errors in your language.\r\nThe AI might not speak your language perfectly, so look out for things that sound odd or don\u2019t flow well.\r\nEnsure that the model use the tone specified in the prompt and the the tone is respectful of cultural context\r\nThe response should not have any awkward phrasing or language errors EVER!\r\n\r\nExamples of a good prompt \ud83e\udd13\r\nCode Generation:\r\n\"Generate Python code for a program that simulates a basic banking system. The program should allow users to create new accounts, deposit and withdraw funds, and check their account balance. Ensure the code includes error handling for invalid inputs (e.g., negative deposit amounts) and uses appropriate data structures to store account information. The code should be well-documented with comments explaining the functionality of each part.\"\r\n\"Implement a graph traversal algorithm in Java that identifies the shortest path between two nodes in a weighted, directed acyclic graph. The graph can be represented using an adjacency list. The algorithm should have a time complexity of O(V+E), where V is the number of vertices and E is the number of edges. Include a main method that demonstrates the usage of the algorithm with a sample graph and two nodes.\"\r\nProblem Reflection:\r\n\"Analyze the challenges of implementing a concurrent system with multiple threads accessing shared resources. Discuss potential issues like race conditions and deadlocks. Explore different synchronization mechanisms (e.g., mutexes, semaphores) and their trade-offs in terms of complexity and performance. How can these mechanisms be used to ensure data integrity and prevent concurrency-related bugs?\"\r\n\"Consider the problem of designing an efficient caching system for a web application. What are the key factors to consider when choosing a caching strategy (e.g., eviction policies, cache size, consistency)? Discuss the advantages and disadvantages of different caching techniques, such as LRU (Least Recently Used), FIFO (First-In, First-Out), and LFU (Least Frequently Used). How can you measure the effectiveness of a caching system?\"\r\nTests Reasoning:\r\n\"You are given a function that implements a binary search algorithm on a sorted array. The following test cases are provided:\r\nInput array: [2, 5, 8, 12, 16, 23, 38, 56, 72, 91], Target value: 23, Output: 5 (index of the target value)\r\nInput array: [2, 5, 8, 12, 16, 23, 38, 56, 72, 91], Target value: 4, Output: -1 (target value not found)\r\nInput array: [1], Target value: 1, Output: 0\r\nExplain why the binary search algorithm produces these outputs for each of the given test cases. How does the algorithm handle cases where the target value is not present in the array? What is the time complexity of binary search and why is it efficient for searching sorted data?\"\r\n\"Consider a machine learning model trained to classify images of cars and bikes. You are given the following test images and the model's predictions:\r\nImage 1: A clear picture of a car, Prediction: car (correct)\r\nImage 2: A blurry picture of a bike, Prediction: bike (correct)\r\nImage 3: A picture of a car surrounded by bikes, Prediction: bike (incorrect)\r\nAnalyze the model's predictions and explain why it might have misclassified the image of the car with a bike. What factors could be influencing the model's decision? How can you improve the model's accuracy in such cases?\"\r\nCode Refactoring:\r\n\r\nExample 1+++++++++++++++++\r\n\"Refactor the following Java code that calculates the area of different geometric shapes. The code currently uses a long series of if-else statements to determine the shape type. Improve the code by using polymorphism and abstract classes or interfaces to represent different shapes. Ensure the refactored code is more maintainable, extensible, and adheres to object-oriented design principles.\"\r\n// Existing code to be refactored\r\npublic class AreaCalculator {\r\n    public double calculateArea(String shapeType, double\u2026 dimensions) {\r\n        if (shapeType.equals(\u201ccircle\u201d))\r\n            // Calculate area of circle\r\n        } else if (shapeType.equals(\u201crectangle\u201d)) {\r\n            // Calculate area of rectangle\r\n        } else if (shapeType.equals(\u201ctriangle\u201d)) {\r\n            // Calculate area of triangle\r\n        } // \u2026 more else-if statements for other shapes\r\n        return 0;\r\n    }\r\n}\r\nExample 2++++++++++++++++\r\n\u201cYou are given Python code that implements a simple web server using sockets. The code works correctly but lacks proper error handling and logging. Refactor the code to include robust error handling for potential exceptions, such as network errors and invalid requests. Add logging statements to record important events, like client connections, requests, and errors. Ensure the refactored code is more reliable and easier to debug.\u201d\r\ndef longest_common_subsequence(str1, str2):\r\n  \u201c\u201d\"\r\n  Finds the longest common subsequence of two strings (BUGGY!).\r\n  Args:\r\n    str1: The first string.\r\n    str2: The second string.\r\n  Returns:\r\n    The longest common subsequence as a string.\r\n  \u201c\u201d\"\r\n  m = len(str1)\r\n  n = len(str2)\r\n  # Initialize a 2D array INCORRECTLY (should be (m+1) x (n+1))\r\n  dp = [[0] * n for _ in range(m)]\r\n  for i in range(1, m + 1):\r\n    for j in range(1, n + 1):\r\n      if str1[i-1] == str2[j-1]:\r\n        dp[i][j] = dp[i-1][j-1] + 1  # IndexError due to incorrect initialization\r\n      else:\r\n        dp[i][j] = max(dp[i-1][j], dp[i][j-1])  # IndexError here as well\r\n  # Backtracking with the same bug as before\r\n  i = m\r\n  j = n\r\n  lcs = \u201c\u201d\r\n  while i > 0 and j > 0:\r\n    if str1[i-1] == str2[j-1]:\r\n      lcs = str1[i-1] + lcs\r\n      i -= 1\r\n      j -= 1\r\n    else:\r\n      if dp[i-1][j] > dp[i][j-1]:  # Incorrect comparison\r\n        i -= 1\r\n      else:\r\n        j -= 1\r\n  return lcs\r\nBug Fixing:\r\nExample 1 +++++++++++++++\r\n\"A Java program that implements a multithreaded chat application is experiencing intermittent crashes. The crashes seem to occur randomly when multiple users are sending messages simultaneously. Analyze the code and identify the potential race conditions or synchronization issues that might be causing these crashes. Provide a corrected version of the code that addresses these concurrency problems and ensures thread safety.\"\r\nimport java.io.BufferedReader;\r\nimport java.io.IOException;\r\nimport java.io.InputStreamReader;\r\nimport java.io.PrintWriter;\r\nimport java.net.ServerSocket;\r\nimport java.net.Socket;\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\npublic class ChatServer {\r\n  private List<PrintWriter> clientWriters = new ArrayList<>();\r\n  public void start(int port) throws IOException {\r\n    ServerSocket serverSocket = new ServerSocket(port);\r\n    System.out.println(\"Chat server started on port \" + port);\r\n    while (true) {\r\n      Socket clientSocket = serverSocket.accept();\r\n      System.out.println(\"New client connected\");\r\n      // BUG: No synchronization when accessing shared clientWriters list\r\n      clientWriters.add(new PrintWriter(clientSocket.getOutputStream(), true));\r\n      Thread clientThread = new Thread(() -> {\r\n        try {\r\n          BufferedReader reader = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));\r\n          String message;\r\n          while ((message = reader.readLine()) != null) {\r\n            // BUG: No synchronization when accessing shared clientWriters list\r\n            for (PrintWriter writer : clientWriters) {\r\n              writer.println(message);\r\n            }\r\n          }\r\n        } catch (IOException e) {\r\n          System.err.println(\"Error handling client: \" + e.getMessage());\r\n        }\r\n      });\r\n      clientThread.start();\r\n    }\r\n  }\r\n  public static void main(String[] args) throws IOException {\r\n    ChatServer server = new ChatServer();\r\n    server.start(8080);\r\n  }\r\n}\r\nExample 2+++++++++++++++++\r\n\"This Python code is supposed to find the longest common subsequence of two strings, but it's returning incorrect results for some inputs. Debug the code and identify the source of the error. Provide a corrected version of the code that produces the correct output for all valid input strings. Explain the bug you fixed and how your correction addresses the issue.\"\r\ndef longest_common_subsequence(str1, str2):\r\n \"\"\"\r\n Finds the longest common subsequence of two strings (BUGGY!).\r\n Args:\r\n  str1: The first string.\r\n  str2: The second string.\r\n Returns:\r\n  The longest common subsequence as a string.\r\n \u201c\u201d\"\r\n m = len(str1)\r\n n = len(str2)\r\n # Initialize a 2D array with INCORRECT dimensions\r\n dp = [[0] * n for _ in range(m)]  \r\n for i in range(m): # Looping up to m instead of m+1\r\n  for j in range(n): # Looping up to n instead of n+1\r\n   if str1[i] == str2[j]: # Comparing characters at incorrect indices\r\n    dp[i][j] = dp[i-1][j-1] + 1 # Potential IndexError due to incorrect loop bounds\r\n   else:\r\n    dp[i][j] = max(dp[i-1][j], dp[i][j-1]) # Potential IndexError here as well\r\n # Backtracking with incorrect indices and logic\r\n i = m - 1  \r\n j = n - 1\r\n lcs = \u201c\u201d\r\n while i >= 0 and j >= 0: # Incorrect loop condition\r\n  if str1[i] == str2[j]: # Comparing characters at incorrect indices\r\n   lcs = str1[i] + lcs\r\n   i -= 1\r\n   j -= 1\r\n  else:\r\n   if dp[i-1][j] > dp[i][j-1]: # Incorrect comparison and potential IndexError\r\n    i -= 1\r\n   else:\r\n    j -= 1\r\n return lcs\r\nTest Generation:\r\nI'm a software engineer student and I started to study unit test in Java. The following Java function calculates the Fibonacci number at a specific position.\r\npublic class FibSequence {\r\n    public static int fib(int n) {\r\n     \r\n        if (n == 0)\r\n            return 0;\r\n        if (n == 1)\r\n            return 1;\r\n        if (n < 0) {\r\n            throw new IllegalArgumentException(\"n cannot be negative.\");\r\n        }\r\n        int a = 0, b = 1, result = 0;\r\n        for (int counter = 2; counter <= n; counter++) {\r\n            result = a + b;\r\n            a = b;\r\n            b = result;\r\n        }\r\n        return result;\r\n    }\r\n}\r\nI want to create test cases to cover my function whole FibSequence function.\r\nSolutions Reasoning:\r\n\r\n\"You are given a JavaScript implementation of a sorting algorithm called Merge Sort. Explain step-by-step how this algorithm works to sort an array of numbers. Analyze its time and space complexity in comparison to other sorting algorithms, such as Bubble Sort and Quick Sort. Discuss the advantages and disadvantages of Merge Sort, including its suitability for different types of data and use cases.\"\r\nfunction mergeSort(arr) {\r\n if (arr.length <= 1) {\r\n  return arr;\r\n }\r\n const mid = Math.floor(arr.length / 2);\r\n const left = arr.slice(0, mid);\r\n const right = arr.slice(mid);\r\n return merge(mergeSort(left), mergeSort(right));\r\n}\r\nfunction merge(left, right) {\r\n let result = [];\r\n let leftIndex = 0;\r\n let rightIndex = 0;\r\n while (leftIndex < left.length && rightIndex < right.length) {\r\n  if (left[leftIndex] < right[rightIndex]) {\r\n   result.push(left[leftIndex]);\r\n   leftIndex++;\r\n  } else {\r\n   result.push(right[rightIndex]);\r\n   rightIndex++;\r\n  }\r\n }\r\n return result.concat(left.slice(leftIndex)).concat(right.slice(rightIndex));\r\n}\r\n// Example usage:\r\nconst unsortedArray = [5, 2, 4, 6, 1, 3];\r\nconst sortedArray = mergeSort(unsortedArray);\r\nconsole.log(sortedArray); // Output: [1, 2, 3, 4, 5, 6]\r\nExample 2 ++++++++++++++++++++\r\n\u201cAnalyze the following C# code that implements a data structure called a Trie. Explain how this data structure efficiently stores and retrieves a large collection of strings. Discuss its use cases, such as autocomplete functionality and spell checking. Compare the performance of a Trie with other data structures, like hash tables and balanced trees, for storing and searching strings. What are the strengths and weaknesses of using a Trie in different scenarios?\u201d\r\npublic class TrieNode\r\n{\r\n  public char Value { get; set; }\r\n  public bool IsEndOfWord { get; set; }\r\n  public Dictionary<char, TrieNode> Children { get; set; }\r\n  public TrieNode(char value)\r\n  {\r\n    Value = value;\r\n    IsEndOfWord = false;\r\n    Children = new Dictionary<char, TrieNode>();\r\n  }\r\n}\r\npublic class Trie\r\n{\r\n  private TrieNode root;\r\n  public Trie()\r\n  {\r\n    root = new TrieNode(\u2018\\0\u2019); // Root node with null character\r\n  }\r\n  public void Insert(string word)\r\n  {\r\n    TrieNode currentNode = root;\r\n    foreach (char c in word)\r\n    {\r\n      if (!currentNode.Children.ContainsKey\u00a9)\r\n      {\r\n        currentNode.Children.Add(c, new TrieNode\u00a9);\r\n      }\r\n      currentNode = currentNode.Children[c];\r\n    }\r\n    currentNode.IsEndOfWord = true;\r\n  }\r\n  public bool Search(string word)\r\n  {\r\n    TrieNode currentNode = root;\r\n    foreach (char c in word)\r\n    {\r\n      if (!currentNode.Children.ContainsKey\u00a9)\r\n      {\r\n        return false;\r\n      }\r\n      currentNode = currentNode.Children[c];\r\n    }\r\n    return currentNode.IsEndOfWord;\r\n  }\r\n}\r\n// Example usage:\r\nTrie trie = new Trie();\r\ntrie.Insert(\u201capple\u201d);\r\ntrie.Insert(\u201capp\u201d);\r\ntrie.Insert(\u201cbanana\u201d);\r\nConsole.WriteLine(trie.Search(\u201capple\u201d)); // Output: True\r\nConsole.WriteLine(trie.Search(\u201capp\u201d));   // Output: True\r\nConsole.WriteLine(trie.Search(\u201cban\u201d));   // Output: False\r\n\r\n\r\n\r\n\r\n\r\nProjeto: Hopper V2\r\nDura\u00e7\u00e3o das tasks: 60 minutos de tempo pago, 2 horas totais, a princ\u00edpio.\r\nN\u00famero de turnos: 1.\r\nObjetivo: Escrever um prompt que se adeque a categoria pr\u00e9-estabelecida com complexidade suficiente para que ao menos 1 das respostas do modelo falhem (em qualquer dimens\u00e3o)\r\nDocumenta\u00e7\u00e3o oficial: https://docs.google.com/document/d/e/2PACX-1vTG1Op3O-J43chncV-9U7pKPB0lpGY3eq83zT3J8V7XV4DDwrzcy_78-31JwPSx94Bnb2izIFlx5rrk/pub\r\n\r\n\r\nGotchas:\r\nPrompts auto-contidos:\r\nQuando dizemos que os prompts devem ser \"auto-contidos\", queremos dizer que toda a informa\u00e7\u00e3o necess\u00e1ria para entender e resolver a tarefa precisa estar inclu\u00edda no pr\u00f3prio prompt. Em outras palavras:\r\nIncluir o C\u00f3digo Relevante: Se voc\u00ea deseja que o modelo analise ou modifique seu c\u00f3digo, forne\u00e7a o trecho exato do c\u00f3digo, em vez de referenciar arquivos externos.\r\nFornecer Esquemas de API: Se deseja interagir com uma API, inclua o esquema ou a documenta\u00e7\u00e3o necess\u00e1ria, assim o modelo saber\u00e1 quais endpoints e par\u00e2metros est\u00e3o dispon\u00edveis.\r\nEvitar Depend\u00eancias Pessoais ou Inacess\u00edveis: N\u00e3o presuma que o modelo tenha acesso a bases de conhecimento pessoais (por exemplo, colando apenas um arquivo de um projeto que importa e chama fun\u00e7\u00f5es provenientes de diversos outros arquivos aos quais o modelo n\u00e3o tem acesso). O prompt deve conter todos os detalhes relevantes para garantir que a resposta seja precisa e completa, sem depender de contextos desconhecidos. Isso n\u00e3o significa que voc\u00ea n\u00e3o possa usar bibliotecas razo\u00e1velmente populares, o modelo deve ter conhecimento destas.\r\nTrabalhe Junto com o Modelo: Se o c\u00f3digo/resposta que o modelo providenciou est\u00e1 incorreto, n\u00e3o delete o c\u00f3digo/resposta inteiro e come\u00e7e do 0. A ideia \u00e9 trabalhar em conjunto, corrigindo apenas o necess\u00e1rio.\r\nVers\u00e3o da Linguagem:\r\nInforme a vers\u00e3o da linguagem utilizada em situa\u00e7\u00f5es onde possa haver problemas, como em Java e C#.\r\n\r\n\r\nFrameworks e Bibliotecas:\r\nTenha cuidado ao escolher frameworks e bibliotecas para o c\u00f3digo. Evite riscos que possam levar \u00e0 rejei\u00e7\u00e3o da task, especialmente com ferramentas como Django, Docker ou Makefile, que requerem configura\u00e7\u00e3o mais extensa ou conhecimento espec\u00edfico.\r\n\r\n\r\nAPIs Privadas:\r\nEvite o uso de APIs privadas, como as do Google ou outras que exijam uma chave privada. E, se utilizarem APIs p\u00fablicas, mencionem os endpoints utilizados e qual a entrada e sa\u00edda esperada. \r\n\r\n\r\nErros Comuns:\r\nLink de refer\u00eancia\r\nFalta de c\u00f3digo em categorias que necessitam c\u00f3digo\r\nAs seguintes categorias necessitam de c\u00f3digo no prompt:\r\n\u201cTest Reasoning\u201d\r\n\u201cCode refactoring\u201d\r\n\u201cBug Fixing\u201d\r\n\u201cTest Generation\u201d\r\n\u201cSolution Reasoning\u201d\r\nPrompts incorretos nas categorias de reasoning\r\n\r\n\r\nPara \u201cReasoning\u201d:\r\nPedir para o modelo explicar o c\u00f3digo (ou os testes), solicitando uma an\u00e1lise passo a passo (Solution Reasoning) ou uma explica\u00e7\u00e3o do porqu\u00ea de resultados espec\u00edficos nos testes (Test Reasoning).\r\n Observa\u00e7\u00e3o: N\u00e3o se deve gerar c\u00f3digo novo nessas categorias.\r\nPara \u201cTest Generation\u201d:\r\n \u00c9 importante ter o c\u00f3digo pronto e requisitar que testes sejam criados.\r\nDica: Pedir que o modelo crie testes unit\u00e1rios usando frameworks espec\u00edficas (ex.: jest) \u00e9 uma maneira f\u00e1cil de faz\u00ea-lo falhar.\r\nC\u00f3digo n\u00e3o testado\r\n\r\n\r\nTeste o c\u00f3digo gerado e cole o output ou erro nos campos apropriados:\r\nErros \u2192 campo de error\r\nOutput regular \u2192 campo de standard output\r\nSe a IDE da plataforma n\u00e3o permitir testes, rode o c\u00f3digo localmente.\r\nCaso n\u00e3o seja poss\u00edvel testar, considere usar outro prompt que voc\u00ea consiga testar; a revis\u00e3o exige garantia de funcionalidade.\r\nPrompt extremamente simples\r\n\r\n\r\nO c\u00f3digo precisa ter algum sentido.Por exemplo, N\u00e3o faz sentido testar:\r\n```\r\nfunction randomNumber() {\r\n  return rand(1,6)\r\n}\r\n```\r\nEsse c\u00f3digo \u00e9 apenas um wrapper para a fun\u00e7\u00e3o rand, com n\u00edvel de complexidade muito baixo, sem utilidade para treinamento.\r\nRatings gen\u00e9ricos ou de LLM\r\n\r\n\r\nMesmo que a tarefa seja aprov\u00e1vel, usar justificativas muito gen\u00e9ricas para os ratings pode resultar em perda de pontos.\r\nAnalise a resposta do modelo de forma independente.\r\nAten\u00e7\u00e3o: Jamais cole a resposta da LLM diretamente nos campos de ratings, pois isso pode levar \u00e0 remo\u00e7\u00e3o do squad, do projeto ou da Outlier.\r\nConfus\u00e3o entre Instruction Following e Truthfulness\r\n\r\n\r\nSe o modelo entendeu a instru\u00e7\u00e3o e tentou cumprir, mas falhou, o problema \u00e9 de Truthfulness, n\u00e3o de Instruction Following.\r\nExemplo:\r\nPedido: Imprimir \u201cHello, world!\u201d no console.\r\nSe nada \u00e9 impresso (n\u00e3o\r\n existe `print` no c\u00f3digo) \u2192 problema de Instruction Following.Se o modelo menciona que est\u00e1 logando, mas n\u00e3o o faz \u2192 problema de Truthfulness.\r\nSe o c\u00f3digo falha por erro (ex.: string n\u00e3o fechada: print(\"Hello, world!)) \u2192 problema de Truthfulness.\r\nC\u00f3digo mal formatado no prompt\r\n\r\n\r\nSempre inclua c\u00f3digo dentro de backticks. Exemplo em C++:\r\n\t\t```cpp\r\n\t\tC\u00f3digo aqui\r\n\t\t```\r\nN\u00e3o consertar a resposta\r\n\r\n\r\nSe a resposta escolhida como a melhor cont\u00e9m erros, voc\u00ea deve corrigi-los na reescrita.\r\nSe algum issue foi marcado em algum rating da resposta, \u00e9 sua responsabilidade corrigi-lo.\r\nTome cuidado com esses pontos para aumentar as chances de aprova\u00e7\u00e3o das suas tasks.\r\n\r\n\r\nOutline da task:\r\n\r\nRatings:\r\nInstruction Following:\r\nVerifique se o modelo *entendeu* as instru\u00e7\u00f5es do prompt e *tentou* responder da maneira certa, incluindo requisitos impl\u00edcitos.\r\nLocalization\r\nVerifique se a resposta respeita as caracter\u00edsticas culturais (vc pediu um programa para gerenciar um banco e o modelo usou $ ao inv\u00e9s de R$, por exemplo) e est\u00e1 na linguagem correta (sem nenhuma palavra em idioma aleat\u00f3rio)\r\nTruthfulness\r\nTodas as informa\u00e7\u00f5es est\u00e3o corretas? (o c\u00f3digo roda? O modelo alucinou na resposta ou inventou alguma coisa que n\u00e3o condiz com a realidade do c\u00f3digo?)\r\nVerbosity\r\nA resposta est\u00e1 equilibrada, sem ser curta demais ou excessivamente longa?\r\nA solu\u00e7\u00e3o apresenta os passos necess\u00e1rios de forma otimizada e completa?\r\nStyle and Clarity\r\nVerifique se a resposta est\u00e1 bem estruturada, sem excesso de blocos de c\u00f3digo soltos (sem markdown por exemplo, ou de maneira confusa)\r\nLegibilidade: A resposta \u00e9 f\u00e1cil de ler e entender?\r\nEstrutura: O conte\u00fado est\u00e1 bem organizado e visualmente claro?\r\nFormata\u00e7\u00e3o: Foram usados recursos como listas ou markdown para deixar a explica\u00e7\u00e3o mais clara?\r\nChecklist:\r\n\u2705 Se no Side by Side rating nenhuma resposta \u00e9 melhor do que outra, as duas tem que ter problemas. Se as duas est\u00e3o perfeitas, refa\u00e7a o prompt.\r\n\u2705 O prompt n\u00e3o cont\u00e9m um problema do leetcode/hackerrank/etc e n\u00e3o foi descaradamente copiado da internet ou de uma LLM.\r\n\u2705 Prompt est\u00e1 na linguagem correta.\r\n\u2705 Prompt menciona a linguagem de programa\u00e7\u00e3o da task.\r\n\u2705 Prompt est\u00e1 na categoria correta.\r\n\u2705 Se o prompt cont\u00e9m c\u00f3digo, ele est\u00e1 funcionando.\r\n\u2705 Se a resposta final tiver c\u00f3digo, ele est\u00e1 funcionando corretamente.\r\n\u2705 A resposta final n\u00e3o cont\u00e9m informa\u00e7\u00f5es falsas.\r\n\u2705 A melhor resposta foi selecionada como melhor e os ratings dados pra ela fazem sentido com o rating do side by side.\r\n\r\n\r\nExemplos de prompt:\r\nTest Generation:\r\nC++ - PT-PT:\r\nTrabalho como desenvolvedor de jogos para uma grande empresa e criei este c\u00f3digo em C++ que recebe uma dire\u00e7\u00e3o, uma velocidade e um tempo em segundos e calcula a posi\u00e7\u00e3o final de um jogador, num cen\u00e1rio 2D, assumindo que o jogo roda a 60 frames por segundo. No entanto, quero ter a certeza de que est\u00e1 a funcionar corretamente; podes criar um conjunto de testes unit\u00e1rios usando Google Test para ele? Certifica-te de fornecer uma cobertura abrangente e que todos os testes passem.\r\n\r\n`Implementation.h`\r\n```cpp\r\n#include <iostream>\r\n#include <chrono>\r\n#include <thread>\r\n#include <cmath>\r\n#include <stdexcept>\r\n\r\nclass Vector2 {\r\npublic:\r\n    double x, y;\r\n    Vector2(double x = 0, double y = 0) : x(x), y(y) {}\r\n    Vector2 operator*(double scalar) const { return Vector2(x * scalar, y * scalar); }\r\n    Vector2 operator+(const Vector2& other) const { return Vector2(x + other.x, y + other.y); }\r\n};\r\n\r\nVector2 normalize(const Vector2& vec) {\r\n    double length = std::sqrt(vec.x * vec.x + vec.y * vec.y);\r\n    if (length == 0) throw std::invalid_argument(\"Direcao invalida (vetor nulo)\");\r\n    return Vector2(vec.x / length, vec.y / length);\r\n}\r\n\r\nclass Player {\r\npublic:\r\n    Vector2 position;\r\n    Player(double x = 0, double y = 0) : position(x, y) {}\r\n};\r\n\r\nVector2 movePlayer(Player& player, Vector2 direction, double velocity, double durationSeconds) {\r\n    if (velocity < 0) throw std::invalid_argument(\"Velocidade nao pode ser negativa\");\r\n    if (durationSeconds <= 0) throw std::invalid_argument(\"Duracao deve ser maior que zero\");\r\n    const double fps = 60.0;\r\n    double dt = 1.0 / fps;\r\n    int frames = static_cast<int>(durationSeconds * fps);\r\n    direction = normalize(direction);\r\n    for (int i = 0; i < frames; ++i) {\r\n        Vector2 displacement = direction * velocity * dt;\r\n        player.position = player.position + displacement;\r\n        std::this_thread::sleep_for(std::chrono::milliseconds(16));\r\n    }\r\n    return player.position;\r\n}\r\n```\r\n\r\nCode Refactoring\r\nC++ - PT-PT\r\nSou um programador de jogos a trabalhar num motor de jogo orientado por eventos em C++. O meu sistema atual permite registar e despachar eventos utilizando *type erasure*, mas o c\u00f3digo n\u00e3o \u00e9 modular e \u00e9 dif\u00edcil de manter. Preciso de uma vers\u00e3o refatorada deste c\u00f3digo que melhore a modularidade, siga as pr\u00e1ticas modernas de C++ e separe melhor as responsabilidades. Poderias refatorar o seguinte c\u00f3digo para o tornar mais sustent\u00e1vel e extens\u00edvel?\r\n```cpp\r\n#include <iostream>\r\n#include <functional>\r\n#include <unordered_map>\r\n#include <vector>\r\n#include <typeindex>\r\n\r\ntemplate<typename Evento>\r\nusing Listener = std::function<void(const Evento&)>;\r\n\r\ntemplate<typename Evento>\r\nvoid adicionarListener(\r\n    std::unordered_map<std::type_index, std::vector<std::function<void(const void*)>>>& listeners,\r\n    Listener<Evento> listener\r\n) {\r\n    listeners[std::type_index(typeid(Evento))].push_back(\r\n        [listener](const void* evento) {\r\n            listener(*static_cast<const Evento*>(evento));\r\n        }\r\n    );\r\n}\r\n\r\ntemplate<typename Evento>\r\nvoid despachar(\r\n    const std::unordered_map<std::type_index, std::vector<std::function<void(const void*)>>>& listeners,\r\n    const Evento& evento\r\n) {\r\n    auto it = listeners.find(std::type_index(typeid(Evento)));\r\n    if (it != listeners.end()) {\r\n        for (const auto& listener : it->second) {\r\n            listener(&evento);\r\n        }\r\n    }\r\n}\r\n\r\nstruct JogadorPontuouEvento {\r\n    int jogadorId;\r\n    int pontos;\r\n};\r\n\r\nstruct JogoTerminadoEvento {\r\n    bool vitoria;\r\n};\r\n\r\nint main() {\r\n    std::unordered_map<std::type_index, std::vector<std::function<void(const void*)>>> listeners;\r\n\r\n    adicionarListener<JogadorPontuouEvento>(listeners, [](const JogadorPontuouEvento& e) {\r\n        std::cout << \"Jogador \" << e.jogadorId << \" marcou \" << e.pontos << \" pontos.\\n\";\r\n    });\r\n\r\n    adicionarListener<JogoTerminadoEvento>(listeners, [](const JogoTerminadoEvento& e) {\r\n        std::cout << (e.vitoria ? \"Vit\u00f3ria!\" : \"Derrota!\") << \"\\n\";\r\n    });\r\n\r\n    despachar(listeners, JogadorPontuouEvento{1, 150});\r\n    despachar(listeners, JogoTerminadoEvento{false});\r\n\r\n    return 0;\r\n}\r\n```\r\n\r\nCode Generation\r\nC++ - PT-PT\r\nSou designer de jogos e estou a estudar m\u00e1quinas de estados, mas tenho dificuldades em implement\u00e1-las em C++, especialmente depois de descobrir o polimorfismo. Poderia fornecer um exemplo detalhado de uma m\u00e1quina de estados implementada em C++ utilizando o padr\u00e3o de design State com polimorfismo? Preciso de uma m\u00e1quina de estados que inclua os seguintes estados:\r\n\r\n* Inativo  \r\n* A correr  \r\n* Em pausa  \r\n* Terminado\r\n\r\ncom transi\u00e7\u00f5es entre estes estados baseadas na entrada do utilizador. O exemplo deve incluir uma fun\u00e7\u00e3o `main` onde o utilizador possa introduzir comandos para alterar os estados.Inclua coment\u00e1rios que expliquem o c\u00f3digo e a l\u00f3gica por detr\u00e1s de cada transi\u00e7\u00e3o.\r\n\r\n\r\nBug Fixing\r\nC++ -  PT-PT (neste caso o erro est\u00e1 na condicional if (failed) que deveria ser `if (!failed)`).\r\nSou um desenvolvedor de jogos e estou a trabalhar num prot\u00f3tipo de um jogo roguelike em C++. De momento, estou a desenvolver um gerador de mapas que cria v\u00e1rias salas e as conecta atrav\u00e9s de corredores. Como se trata de um prot\u00f3tipo, todo o mapa \u00e9 representado por caracteres ASCII.\r\n\r\nInfelizmente, o meu c\u00f3digo n\u00e3o est\u00e1 a funcionar corretamente, embora compile. Sempre que o executo, o mapa gerado consiste apenas de paredes ('#') sem qualquer corredor ou sala.\r\n\r\nPoderia corrigir este erro para mim?\r\n\r\nAqui est\u00e1 o meu c\u00f3digo:\r\n```cpp\r\n#include <iostream>\r\n#include <vector>\r\n#include <cstdlib>\r\n#include <ctime>\r\n#include <algorithm>\r\n\r\nusing namespace std;\r\n\r\nconst int WIDTH = 80;\r\nconst int HEIGHT = 25;\r\nconst int MAX_ROOMS = 10;\r\nconst int ROOM_MIN_SIZE = 4;\r\nconst int ROOM_MAX_SIZE = 10;\r\n\r\nstruct Room {\r\n    int x, y, width, height;\r\n    int centerX() const { return x + width / 2; }\r\n    int centerY() const { return y + height / 2; }\r\n};\r\n\r\nbool intersects(const Room& a, const Room& b) {\r\n    return (a.x <= b.x + b.width && a.x + a.width >= b.x &&\r\n            a.y <= b.y + b.height && a.y + a.height >= b.y);\r\n}\r\n\r\nint main() {\r\n    srand(static_cast<unsigned int>(time(0)));\r\n\r\n    vector<vector<char>> dungeon(HEIGHT, vector<char>(WIDTH, '#'));\r\n    vector<Room> rooms;\r\n\r\n    for (int i = 0; i < MAX_ROOMS; i++) {\r\n        int w = ROOM_MIN_SIZE + rand() % (ROOM_MAX_SIZE - ROOM_MIN_SIZE + 1);\r\n        int h = ROOM_MIN_SIZE + rand() % (ROOM_MAX_SIZE - ROOM_MIN_SIZE + 1);\r\n        int x = rand() % (WIDTH - w - 1) + 1;\r\n        int y = rand() % (HEIGHT - h - 1) + 1;\r\n\r\n        Room newRoom { x, y, w, h };\r\n\r\n        bool failed = false;\r\n        for (const auto& other : rooms) {\r\n            if (intersects(newRoom, other)) {\r\n                failed = true;\r\n                break;\r\n            }\r\n        }\r\n        if (failed) {\r\n            for (int row = y; row < y + h; row++) {\r\n                for (int col = x; col < x + w; col++) {\r\n                    dungeon[row][col] = '.';\r\n                }\r\n            }\r\n\r\n            if (!rooms.empty()) {\r\n                int prevCenterX = rooms.back().centerX();\r\n                int prevCenterY = rooms.back().centerY();\r\n                int newCenterX = newRoom.centerX();\r\n                int newCenterY = newRoom.centerY();\r\n\r\n                if (rand() % 2) {\r\n                    for (int col = min(prevCenterX, newCenterX); col <= max(prevCenterX, newCenterX); col++) {\r\n                        dungeon[prevCenterY][col] = '.';\r\n                    }\r\n                    for (int row = min(prevCenterY, newCenterY); row <= max(prevCenterY, newCenterY); row++) {\r\n                        dungeon[row][newCenterX] = '.';\r\n                    }\r\n                } else {\r\n                    for (int row = min(prevCenterY, newCenterY); row <= max(prevCenterY, newCenterY); row++) {\r\n                        dungeon[row][prevCenterX] = '.';\r\n                    }\r\n                    for (int col = min(prevCenterX, newCenterX); col <= max(prevCenterX, newCenterX); col++) {\r\n                        dungeon[newCenterY][col] = '.';\r\n                    }\r\n                }\r\n            }\r\n\r\n            rooms.push_back(newRoom);\r\n        }\r\n    }\r\n\r\n    for (const auto& row : dungeon) {\r\n        for (char cell : row) {\r\n            cout << cell;\r\n        }\r\n        cout << endl;\r\n    }\r\n\r\n    return 0;\r\n}\r\n```\r\n\r\n\r\nSolution Reasoning\r\nJavaScript - pt-PT\r\nSou um programador que est\u00e1 a trabalhar num sistema de convers\u00e3o de moedas para uma aplica\u00e7\u00e3o financeira. Recentemente, implementei uma fun\u00e7\u00e3o em JavaScript para calcular as taxas de c\u00e2mbio entre diferentes moedas. Agora, preciso de analisar cautelosamente esta solu\u00e7\u00e3o para garantir que funcione corretemente e de forma eficiente. Aqui est\u00e1 o c\u00f3digo que implementei:\r\n\r\n```javascript\r\nfunction calcularTaxaCambio(moedaBase, moedaAlvo, taxas) {\r\n  if (moedaBase === moedaAlvo) {\r\n    return 1;\r\n  }\r\n\r\n  if (taxas[moedaBase] && taxas[moedaBase][moedaAlvo]) {\r\n    return taxas[moedaBase][moedaAlvo];\r\n  }\r\n\r\n  for (let moedaIntermediaria in taxas[moedaBase]) {\r\n    if (taxas[moedaIntermediaria] && taxas[moedaIntermediaria][moedaAlvo]) {\r\n      return taxas[moedaBase][moedaIntermediaria] * taxas[moedaIntermediaria][moedaAlvo];\r\n    }\r\n  }\r\n\r\n  throw new Error(\"N\u00e3o foi poss\u00edvel calcular a taxa de c\u00e2mbio\");\r\n}\r\n```\r\n\r\nPor favor, analise esta fun\u00e7\u00e3o passo a passo, explicando como funciona e discutindo sua efici\u00eancia. Considere os seguintes pontos na sua analise:\r\n- Como a fun\u00e7\u00e3o lida com diferentes cen\u00e1rios de convers\u00e3o de moeda?\r\n- Qual \u00e9 a complexidade temporal e espacial da solu\u00e7\u00e3o?\r\n- Existem potenciais problemas ou limita\u00e7\u00f5es?\r\n- Como a solu\u00e7\u00e3o se compara com outras poss\u00edveis abordagens?\r\n- Que melhorias ou otimiza\u00e7\u00f5es poderiam ser feitas para tornar essa fun\u00e7\u00e3o mais robusta ou eficiente?\r\n\r\nSOON\u2122\ufe0f more examples \r\n\r\n"
  },
  {
    "role": "user",
    "content": "Please confirm you have access to the information I provided."
  },
  {
    "role": "assistant",
    "content": "Yes, I have access to the information you provided. I can answer questions about this content and use it as my knowledge base."
  }
]